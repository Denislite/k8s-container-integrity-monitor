# Default values for hasher-helmchart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}


postgresql:
  auth:
    postgresPassword: ""
    username: ""
    password: ""
    database: ""
    postgresqlDataDir: /bitnami/postgresql/data

  primary:
    initdb:
      scripts:
        00_init_extensions.sh: |
          #!/bin/sh
          export PGPASSWORD=$POSTGRES_PASSWORD 
          psql -w -d $POSTGRES_DB -U $POSTGRES_USER -c "
          CREATE TABLE IF NOT EXISTS hashfiles 
          ( 
          id                BIGSERIAL PRIMARY KEY,
          file_name         VARCHAR NOT NULL,
          full_file_path    TEXT    NOT NULL,
          algorithm         VARCHAR NOT NULL,
          hash_sum          VARCHAR NOT NULL,
          name_deployment   TEXT,
          name_pod          TEXT,
          time_of_creation  VARCHAR (50),
          image_tag         TEXT,
          CONSTRAINT files_unique UNIQUE (full_file_path, algorithm)
          );"

    podSecurityContext:
      enabled: false
      fsGroup: ""
    containerSecurityContext:
      enabled: false
      runAsUser: "auto"

    persistence:
      enabled: true
      existingClaim: ""
      accessModes:
        - ReadWriteMany
      size: 5Gi

    readReplicas:
      podSecurityContext:
        enabled: false
        fsGroup: ""
      containerSecurityContext:
        enabled: false
        runAsUser: "auto"

    volumePermissions:
      enabled: false
      securityContext:
        runAsUser: "auto"

