# dependency with database "postgresql"
postgresql:
  auth:
    # Authentication data to connect to the database
    postgresPassword: ""
    username: ""
    password: ""
    database: ""
    postgresqlDataDir: /bitnami/postgresql/data

  primary:
    initdb:
      scripts:
        # Set by the initdb script during initial container startup
        00_init_extensions.sh: |
          #!/bin/sh
          export PGPASSWORD=$POSTGRES_PASSWORD 
          psql -w -d $POSTGRES_DB -U $POSTGRES_USER -c "
          CREATE TABLE IF NOT EXISTS hashfiles 
          ( 
          id                BIGSERIAL PRIMARY KEY,
          file_name         VARCHAR NOT NULL,
          full_file_path    TEXT    NOT NULL,
          algorithm         VARCHAR NOT NULL,
          hash_sum          VARCHAR NOT NULL,
          name_deployment   TEXT,
          name_pod          TEXT,
          time_of_creation  VARCHAR (50),
          image_tag         TEXT,
          CONSTRAINT files_unique UNIQUE (full_file_path, algorithm)
          );"

    # Enable security context
    podSecurityContext:
      enabled: false
      fsGroup: ""
    # Enable container security context
    containerSecurityContext:
      enabled: false
      runAsUser: "auto"

    persistence:
      # Enable PostgreSQL Primary data persistence using PVC
      enabled: true
      existingClaim: ""
      accessModes:
        - ReadWriteMany
      size: 5Gi

    #Enable security context
    readReplicas:
      podSecurityContext:
        enabled: false
        fsGroup: ""
      containerSecurityContext:
        enabled: false
        runAsUser: "auto"

    # Enable init container that changes the owner and group of the persistent volume
    volumePermissions:
      enabled: false
      securityContext:
        runAsUser: "auto"


serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

service:
  type: ClusterIP
  port: 80

# Controls external access to services in the cluster
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

# Allows for automatic scaling of Kubernetes worker nodes based on resource utilization
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80


